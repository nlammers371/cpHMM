
#------------------------------------Routine Variable Definitions------------------------------------------------------#
#Nax number of iterations permitted
max_iter=1000
# Seconds per time step
dt = 6.2
n_inf = 300
# set num cores to use
num_inf_cores = 16 #multiprocessing.cpu_count()
# Set number of initialization routines
#n_init = 1
# set num cores to use
#num_init_cores = multiprocessing.cpu_count()
#Max num permitted paths in stack
max_stack = 100
#Estimate noise
estimate_noise = 0
#-------------------------------------"True" Variable Definitions------------------------------------------------------#
# noise
sigma = 12.5
# memory
w = 15
# Fix trace length for now
T = 200
#Num states
K = 3
# Number of traces per batch
batch_size = 100
# Set transition rate matrix for system
if K == 3:
    R = np.array([[-.004, .009, .005], [.003, -.014, .015], [.001, .005, -.02]]) * dt

elif K == 2:
    R = np.array([[-.004, .014], [.004, -.014]]) * dt

#A = scipy.linalg.expm(R, q=None)
#print(A)
# Set emission levels
if K == 3:
    v = np.array([0.0, 25.0, 50.0])
elif K == 2:
    v = np.array([0.0,25.0])

# Initial stat pdf
if K == 3:
    pi = [.8,.1,.1]
elif K == 2:
    pi = [.8, .2]

#------------------------------------------Inference Init Variables----------------------------------------------------#
if K == 3:
    v_prior = np.array([   0,   24.0,  51.0])
    A_prior = np.array([[ .8,   .1,   .1],
                    [ .1,   .8,   .1],
                    [ .1,   .1,   .8]])
elif K == 2:
    v_prior = [0,35]
    A_prior = np.array([[.8, .2],
                        [.2, .8]])
sigma_prior = 14

#Degree of flexibility to allow in param initiations (2 = +/- full variable value)
A_temp = 1
v_temp = .25
sigma_temp = .25

#-----------------------------------------------Write Paths------------------------------------------------------------#
# Set test name
test_name = "mike_params_3state_low_noise_cold_v_sigma"
# Set writepath for results
outpath = '../results/decode_validation/'
# Set project name (creates subfolder)
subfolder_name = test_name
if not os.path.isdir(os.path.join(outpath, subfolder_name)):
    os.makedirs(os.path.join(outpath, subfolder_name))
if not os.path.isdir(os.path.join(outpath, subfolder_name, 'plots')):
    os.makedirs(os.path.join(outpath, subfolder_name, 'plots'))


#Define function to call viterbi fit in parallel
def runit(init_set, fluo,pi):
    A_init = init_set[0]
    v_init = init_set[1]
    sigma_init = init_set[2]
    A_list, v_list, logL_list, sigma_list = cpEM_viterbi_full(fluo=fluo, A_init=A_init, v_init=v_init, noise_init=sigma_init, pi0=pi, w=w, use_viterbi=0,estimate_noise=estimate_noise, n_groups=5, max_stack=max_stack, max_iter=max_iter, eps=10e-4)
    return np.exp(A_list[-1]), v_list[-1], logL_list[-1], sigma_list[-1]

